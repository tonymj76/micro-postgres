// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  metadata: true
//  asset-dir: true
//  restore: true
// sources:
//  datastore/migrations/000001_create_users.down.sql
//  datastore/migrations/000001_create_users.up.sql
//  datastore/migrations/000002_create_users.down.sql
//  datastore/migrations/000002_create_users.up.sql

package migrations

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64
	mode os.FileMode
	time time.Time

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return a.mode
}

func (a *asset) ModTime() time.Time {
	return a.time
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"datastore/migrations/000001_create_users.down.sql": &asset{
		name: "000001_create_users.down.sql",
		data: "" +
			"\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e" +
			"\x2d\x2a\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x82\xa8\x89\x0c\x70\x55\x28\xca\xcf\x49\xb5\xe6" +
			"\x02\x04\x00\x00\xff\xff",
		size: 52,
		mode: 0666,
		time: time.Unix(1589140225, 379431000),
	},
	"datastore/migrations/000001_create_users.up.sql": &asset{
		name: "000001_create_users.up.sql",
		data: "" +
			"\x64\xce\xc1\x6a\xb4\x40\x0c\x07\xf0\xfb\x3c\xc5\xff\xa6\xc2\xbe\xc1\x77\x9a\x6f\x37\xa5\x43\x75" +
			"\x94\x31\x43\x6b\x2f\x62\xd7\x20\x42\x47\x97\x51\x0f\x7d\xfb\xd2\xa1\x5d\x0a\xbd\x84\x84\xe4\x97" +
			"\xe4\xec\x48\x33\x81\x5e\x98\x6c\x6b\x6a\x8b\xdb\x74\x8d\x1f\xb7\x7d\xfd\xa7\xd4\x77\x8f\xbb\x86" +
			"\x10\xd7\x77\x81\x6e\x41\xd6\x57\xc8\xb3\xe9\x90\x6d\xcf\x4e\xc8\x82\x84\x37\x89\x5f\xd9\x30\x86" +
			"\x79\xc9\x8a\x5f\x4e\xff\x2f\x09\xc7\x26\x71\x43\xae\x00\x60\x1e\xe1\xbd\xb9\xa0\x71\xa6\xd2\xae" +
			"\xc3\x13\x75\xb8\xd0\x83\xf6\x25\x63\x92\xa5\x8f\xc3\x32\xae\xa1\x3f\x8e\x79\xcc\x8b\x53\x22\xe9" +
			"\x6e\x0a\xb6\x66\x58\x5f\x96\x77\xf1\xf3\x44\x9a\xbb\x46\x19\x76\xe9\xf7\x39\x08\xd8\x54\xd4\xb2" +
			"\xae\x1a\x3c\x1b\x7e\x4c\x25\x5e\x6b\x4b\x7f\x57\x9c\xbd\x73\x64\xb9\xbf\x0b\x55\xa8\xcf\x00\x00" +
			"\x00\xff\xff",
		size: 274,
		mode: 0666,
		time: time.Unix(1589140227, 716760500),
	},
	"datastore/migrations/000002_create_users.down.sql": &asset{
		name: "000002_create_users.down.sql",
		data: "" +
			"\x01\x00\x00\xff\xff",
		size: 0,
		mode: 0666,
		time: time.Unix(1589402662, 592874700),
	},
	"datastore/migrations/000002_create_users.up.sql": &asset{
		name: "000002_create_users.up.sql",
		data: "" +
			"\x01\x00\x00\xff\xff",
		size: 0,
		mode: 0666,
		time: time.Unix(1589402662, 591873700),
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"datastore": bintree{
		"migrations": bintree{
			"000001_create_users.down.sql": bintree{},
			"000001_create_users.up.sql":   bintree{},
			"000002_create_users.down.sql": bintree{},
			"000002_create_users.up.sql":   bintree{},
		},
	},
}
