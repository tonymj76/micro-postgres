// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...client.CallOption) (*User, error)
	DelectUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*User, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (UserService_ListUsersService, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) AddUser(ctx context.Context, in *AddUserRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserService.AddUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DelectUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserService.DelectUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (UserService_ListUsersService, error) {
	req := c.c.NewRequest(c.name, "UserService.ListUsers", &ListUsersRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userServiceListUsers{stream}, nil
}

type UserService_ListUsersService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*User, error)
}

type userServiceListUsers struct {
	stream client.Stream
}

func (x *userServiceListUsers) Close() error {
	return x.stream.Close()
}

func (x *userServiceListUsers) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceListUsers) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceListUsers) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceListUsers) Recv() (*User, error) {
	m := new(User)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	AddUser(context.Context, *AddUserRequest, *User) error
	DelectUser(context.Context, *DeleteUserRequest, *User) error
	ListUsers(context.Context, *ListUsersRequest, UserService_ListUsersStream) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		AddUser(ctx context.Context, in *AddUserRequest, out *User) error
		DelectUser(ctx context.Context, in *DeleteUserRequest, out *User) error
		ListUsers(ctx context.Context, stream server.Stream) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) AddUser(ctx context.Context, in *AddUserRequest, out *User) error {
	return h.UserServiceHandler.AddUser(ctx, in, out)
}

func (h *userServiceHandler) DelectUser(ctx context.Context, in *DeleteUserRequest, out *User) error {
	return h.UserServiceHandler.DelectUser(ctx, in, out)
}

func (h *userServiceHandler) ListUsers(ctx context.Context, stream server.Stream) error {
	m := new(ListUsersRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserServiceHandler.ListUsers(ctx, m, &userServiceListUsersStream{stream})
}

type UserService_ListUsersStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*User) error
}

type userServiceListUsersStream struct {
	stream server.Stream
}

func (x *userServiceListUsersStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceListUsersStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceListUsersStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceListUsersStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceListUsersStream) Send(m *User) error {
	return x.stream.Send(m)
}
